---------------------------------------------------------------------------------------------------------------------------------------------------------
# Modelo de Regressão Multivariado
---------------------------------------------------------------------------------------------------------------------------------------------------------
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Selecionar variáveis de entrada (features) e de saída (targets)
X = data[['temperature', 'co2_emissions', 'sea_level_rise', 'precipitation', 'humidity', 'wind_speed']]
y = data[['temperature', 'co2_emissions', 'sea_level_rise', 'precipitation', 'humidity', 'wind_speed']]

# Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criar o modelo Random Forest para múltiplas saídas
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Usar MultiOutputRegressor para prever múltiplas variáveis simultaneamente
multi_output_model = MultiOutputRegressor(rf_model)

# Treinar o modelo
multi_output_model.fit(X_train, y_train)

# Fazer previsões com o conjunto de teste
y_pred = multi_output_model.predict(X_test)

# Avaliar o modelo
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Exibir as primeiras previsões
print("Previsões para as primeiras 5 observações:")
print(y_pred[:5])

---------------------------------------------------------------------------------------------------------------------------------------------------------
# Previsões sobre os valores de cada uma das variáveis de saída
---------------------------------------------------------------------------------------------------------------------------------------------------------
import pandas as pd

# Fazer previsões com o conjunto de teste
y_pred = multi_output_model.predict(X_test)

# Converter as previsões em DataFrame para fácil leitura
predictions_df = pd.DataFrame(y_pred, columns=['temperature', 'co2_emissions', 'sea_level_rise', 'precipitation', 'humidity', 'wind_speed'])

# Garantir que o y_test seja um DataFrame com o mesmo índice
y_test_df = pd.DataFrame(y_test, columns=['temperature', 'co2_emissions', 'sea_level_rise', 'precipitation', 'humidity', 'wind_speed'])

# Exibir as primeiras 5 observações reais vs. previstas
comparison_df = pd.concat([y_test_df.reset_index(drop=True), predictions_df], axis=1)
comparison_df.columns = ['Real_temperature', 'Real_co2_emissions', 'Real_sea_level_rise', 'Real_precipitation', 'Real_humidity', 'Real_wind_speed', 
                         'Predicted_temperature', 'Predicted_co2_emissions', 'Predicted_sea_level_rise', 'Predicted_precipitation', 'Predicted_humidity', 'Predicted_wind_speed']

print(comparison_df.head())  # Mostra as primeiras 5 linhas da comparação

# Prever para novas observações (se necessário)
new_data = X_test.iloc[:5]  # Escolher novas observações (aqui estamos pegando as 5 primeiras)
new_predictions = multi_output_model.predict(new_data)

# Exibir as previsões para novas observações
new_predictions_df = pd.DataFrame(new_predictions, columns=['temperature', 'co2_emissions', 'sea_level_rise', 'precipitation', 'humidity', 'wind_speed'])
print("Previsões para as 5 novas observações:")
print(new_predictions_df)
